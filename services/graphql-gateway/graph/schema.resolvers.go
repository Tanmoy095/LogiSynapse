package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/Tanmoy095/LogiSynapse/graphql-gateway/graph/generated"
	"github.com/Tanmoy095/LogiSynapse/graphql-gateway/graph/model"
	"github.com/google/uuid"
)

var shipments []*model.Shipment

// CreateShipment is the resolver for the createShipment field.
func (r *mutationResolver) CreateShipment(ctx context.Context, input model.NewShipmentInput) (*model.Shipment, error) {
	newID := uuid.New().String()

	newShipment := &model.Shipment{
		ID:          newID,
		Status:      input.Status, // Uses GraphQL enum (IN_TRANSIT, DELIVERED, PENDING)
		Origin:      input.Origin,
		Destination: input.Destination,
		Eta:         input.Eta,
		Carrier: &model.Carrier{
			Name:        input.Carrier.Name,
			TrackingURL: input.Carrier.TrackingURL, // Fixed to match schema (trackingUrl)
		},
	}
	shipments = append(shipments, newShipment)
	return newShipment, nil
}

// Now implement Query resolver methods on queryResolver
func (r *queryResolver) Shipments(ctx context.Context, origin *string) ([]*model.Shipment, error) {
	allShipments := []*model.Shipment{
		{
			ID:          "1",
			Status:      "In Transit",
			Origin:      "Dhaka",
			Destination: "Berlin",
			Eta:         "2025-07-15",
			Carrier: &model.Carrier{
				Name:        "DHL",
				TrackingURL: "https://dhl.com/track/123",
			},
		},
		{
			ID:          "2",
			Status:      "Delivered",
			Origin:      "Chittagong",
			Destination: "Munich",
			Eta:         "2025-07-10",
			Carrier: &model.Carrier{
				Name:        "DHL",
				TrackingURL: "https://dhll.com/track/123",
			},
		},
	}
	shipments := append(shipments, allShipments...)

	// If no origin is provided, return all
	if origin == nil {
		return shipments, nil
	}

	// Filter by origin
	var filtered []*model.Shipment
	for _, shipment := range shipments {
		if shipment.Origin == *origin {
			filtered = append(filtered, shipment)
		}
	}

	return filtered, nil
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Health - health"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
